---

- name: Install Nginx
  apt:
    name: nginx
    update_cache: "{{ update_apt_cache }}"
    state: installed
  tags: packages

- name: Copy the SSL certificate to the remote server
  copy:
    content: "{{ ssl_crt }}"
    dest: "{{ nginx_ssl_dest_dir }}/{{ application_name }}.crt"
  notify: restart nginx
  when: not nginx_use_letsencrypt

- name: Copy the SSL private key to the remote server
  copy:
    content: "{{ ssl_key }}"
    dest: "{{ nginx_ssl_dest_dir }}/{{ application_name }}.key"
  notify: restart nginx
  when: not nginx_use_letsencrypt

- name: Ensure that a strong Diffie-Hellman group is used
  command: openssl dhparam -out /etc/ssl/certs/dhparams.pem 2048
  args:
    creates: /etc/ssl/certs/dhparams.pem
  when: nginx_strong_dh_group is defined and nginx_strong_dh_group

- name: Create the Nginx upstream file
  template:
    src: upstream-template.j2
    dest: /etc/nginx/conf.d/upstream.conf
    backup: yes

- name: Create the Nginx configuration file
  template:
    src: site-template.j2
    dest: "/etc/nginx/sites-available/{{ item }}"
    backup: yes
  notify: reload nginx
  with_items: "{{ app_domains }}"

- name: Ensure that the default site is disabled
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: reload nginx

- name: Ensure that the application site is enabled
  file:
    src: /etc/nginx/sites-available/{{ item }}
    dest: /etc/nginx/sites-enabled/{{ item }}
    state: link
  notify: reload nginx
  with_items: "{{ app_domains }}"

- name: Ensure Nginx service is started
  service:
    name: nginx
    state: started
    enabled: yes
